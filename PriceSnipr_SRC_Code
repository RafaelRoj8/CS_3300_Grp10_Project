import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import requests
from io import BytesIO
import webbrowser
from serpapi import GoogleSearch

#  SERPAPI KEY 
SERPAPI_KEY = ""

# Function to open a URL in the default web browser
def open_link(url):
    if url:
        webbrowser.open(url)

# Function to search and display products
def search_products():
    for widget in results_frame.winfo_children():
        widget.destroy()

    query = product_entry.get()
    target_store = store_var.get()

    params = {
        "engine": "google_shopping",
        "q": query,
        "api_key": SERPAPI_KEY
    }

    search = GoogleSearch(params)
    results = search.get_dict()
    products = results.get("shopping_results", [])

    for product in products:
        store = product.get("source")
        if target_store != "All" and store != target_store:
            continue

        frame = tk.Frame(results_frame, pady=5, bg="#ffffff")
        frame.pack(fill="x", anchor="w")

        img_url = product.get("thumbnail")
        image = None
        if img_url:
            try:
                response = requests.get(img_url)
                img_data = Image.open(BytesIO(response.content))
                img_data = img_data.resize((80, 80))
                image = ImageTk.PhotoImage(img_data)
            except:
                pass

        if image:
            img_label = tk.Label(frame, image=image, bg="#ffffff", cursor="hand2")
            img_label.image = image
            img_label.pack(side="left", padx=5)
            img_label.bind("<Button-1>", lambda e, url=product.get("link"): open_link(url))

        text = f"{product.get('title', 'No title')}\nPrice: {product.get('price', 'N/A')}\nStore: {store}"
        tk.Label(frame, text=text, justify="left", bg="#ffffff", font=("Arial", 10, "bold" if "title" in product else "normal"), wraplength=500).pack(side="left", padx=10)

# GUI Setup
root = tk.Tk()
root.title("PriceSnipr - Multi-Store Tracker")
root.configure(bg="#f0f0f0")

# Main frame with padding
frame = tk.Frame(root, bg="#f0f0f0")
frame.pack(pady=20)

# Load and display the logo image
try:
    logo_image = Image.open("PriceSnipr_Logo.png")
    logo_image = logo_image.resize((300, 150), Image.LANCZOS)
    logo_photo = ImageTk.PhotoImage(logo_image)
    logo_label = tk.Label(frame, image=logo_photo, bg="#f0f0f0")
    logo_label.image = logo_photo
    logo_label.pack(pady=(0, 10))
except Exception as e:
    print("Error loading logo:", e)

# Title
tk.Label(frame, text="PriceSnipr", font=("Arial", 24, "bold"), bg="#f0f0f0").pack(pady=(0, 15))

# Product entry
tk.Label(frame, text="Product Name or Type:", font=("Arial", 10, "bold"), bg="#f0f0f0").pack(anchor="w")
product_entry = tk.Entry(frame, width=50)
product_entry.pack(pady=2)

# Store selection
tk.Label(frame, text="Select Store:", font=("Arial", 10, "bold"), bg="#f0f0f0").pack(anchor="w")
store_var = tk.StringVar(value="All")
store_dropdown = ttk.Combobox(frame, textvariable=store_var, values=["All", "Amazon.com", "Best Buy", "Walmart", "Target", "GameStop", "Sam's Club", "BrandsMart USA", "PlayStation"], state="readonly")
store_dropdown.pack(pady=2)

# Search button
search_button = tk.Button(frame, text="Track Price", command=search_products, bg="green", fg="white", font=("Arial", 10, "bold"))
search_button.pack(pady=10)

# Scrollable results frame
canvas = tk.Canvas(root, borderwidth=0, background="#f0f0f0")
results_frame = tk.Frame(canvas, background="#f0f0f0")
scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)
canvas.create_window((0, 0), window=results_frame, anchor="nw")

# Configure scrolling
results_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

root.mainloop()
